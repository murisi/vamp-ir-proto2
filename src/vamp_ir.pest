WHITESPACE = _{ " " | "\t" | NEWLINE }

COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

lowercaseIdent = @{ (ASCII_ALPHA_LOWER | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

keyword = { "in" | "let" | "fun" }

valueName = { !keyword ~ lowercaseIdent }

infixOp = { "/" | "*" | "+" | "-" | "=" }

integerLiteral = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }

constant = { integerLiteral | "(" ~ ")" }

pattern = { pattern1 ~ ( "as" ~ valueName )* }

pattern1 = { pattern2 ~ ( "," ~ pattern2 )* }

pattern2 = { valueName | constant | "(" ~ pattern ~ ")" }

letBinding = { pattern ~ "=" ~ expr | valueName ~ pattern* ~ "=" ~ expr }

expr = { function | "let" ~ letBinding ~ "in" ~ expr | expr1 }

expr1 = { expr2 ~ ( ";" ~ expr2 )* }

expr2 = { expr3 ~ ( "," ~ expr3 )* }

expr3 = { expr4 ~ ( &"=" ~ infixOp ~ expr4 )* }

expr4 = { expr5 ~ ( &("+" | "-") ~ infixOp ~ expr5 )* }

expr5 = { expr6 ~ ( &("*" | "/") ~ infixOp ~ expr6 )* }

expr6 = { "(" ~ negate* ~ expr7 ~ ")" | expr7 }

expr7 = { expr8+ }

expr8 = { "(" ~ expr ~ ")" | valueName | constant | &"fun" ~ expr | &"let" ~ expr }

function = { "fun" ~ pattern+ ~ "->" ~ expr }

negate = { "-" }

definition = { "let" ~ letBinding }

moduleItems = _{ SOI ~ ";;"* ~ ( definition | expr ) ~ ( ( ";;"* ~ definition ) | ( ";;"+ ~ expr ) )* ~ ";;"* ~ EOI }

